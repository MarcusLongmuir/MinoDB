<p>
The <code>Add Privileges</code> function can be used to give other users read and write access to your <a href="/docs/Folders">folders</a>. You can't grant access directly to your <a href="/docs/Home_Folder">home folder</a> or any of the <a href="/docs/Folders">folders</a> <code>Apps</code>, <code>App Privileges</code>, <code>Type Privileges</code> or <code>Privileges</code> that were created by MinoCloud in your <a href="/docs/Home_Folder">home folder</a>.
</p>

<p>
You can only grant access to <a href="/docs/Folders">folders</a> that you "own", that is, are within your <a href="/docs/Home_Folder">home folder</a> or if your user is an <a href="/docs/Apps">app</a>, an <a href="/docs/App Folders">app folder</a> for your <a href="/docs/Apps">app</a>.
</p>

<p>
By default you may only read (not write) data to the <code>Apps</code> <a href="/docs/Folders">folder</a> or any of the <a href="/docs/App Folders">app folders</a> within your <a href="/docs/Home_Folder">home folder</a>, but an <a href="/docs/Apps">app</a> may grant write access to one of its users.
</p>

<p>
You can add privileges for <a href="/docs/Paths">paths</a> that do not exist, but they must be in a valid format and be for a <a href="/docs/Folders">folder</a> that you would own if it existed.
</p>

<p>
By granting access to the <code>Public</code> user, all users will be given access to the <a href="/docs/Folders">folder</a>. Only read access can be granted to the <code>Public</code> user.
</p>

<p>
The function does not differentiate between successfully creating a privilege and the privilege already existing; both will show as a success.
</p>

<p>
The function takes a single top-level parameter called <code>Privileges</code> which is an array of the privileges you would like to grant.
</p>

<div class="heading">Example Request</div>
<pre>{
    "Privileges" : [
        {
            "Granted To" : "AnotherUser",
            "Path" : "/ExampleUser/Shared/",
            "Grant Write" : false
        },
        {
            "Granted To" : "AnotherUser",
            "Path" : "/ExampleUser/Collaborations/AnotherUser/",
            "Grant Write" : true
        }
    ]
}</pre>

<p>
The function returns an array of the successes in the order in which they were requested.
</p>

<pre>{
    "Privileges" : [
        {
            "Granted" : true
        },
        {
            "Granted" : true
        }
    ]
}</pre>

<div class="heading">Erroneous Request/Response</div>
<p>
If a specified user does not exist or a <a href="/docs/Paths">path</a> is an invalid format (<a href="/docs/Paths">paths</a> that do not exist are permitted), then none of the correctly-formed privileges will be granted and an <a href="/docs/Errors">error</a> will be returned.
</p>
<pre>
{
    "Privileges" : [
        {
            "Granted To" : "NonExistantUser",
            "Path" : "/ExampleUser//DoubleSlashMistake/",
            "Grant Write" : true
        }
    ]
}
</pre>
<p>
In the case of the above request, because the user <code>NonExistantUser</code> does not exist and the <code>Path</code> <code>/ExampleUser//DoubleSlashMistake</code> is invalid, the following <a href="/docs/Errors">error</a> would be returned.
</p>
<pre>{
    "Invalid" : {
        "Privileges" : {
            "Invalid" : {
                "0" : {
                    "Invalid" : {
                        "Granted To" : {
                            "Error" : "User does not exist.",
                            "Error Number" : 76
                        },
                        "Path" : {
                            "Error" : "Invalid format for path.",
                            "Error Number" : 8
                        }
                    }
                }
            }
        }
    }
}</pre>

<p>
To revoke privileges use the <a href="/docs/Remove Privileges_Function">Remove Privileges function</a>.
</p>