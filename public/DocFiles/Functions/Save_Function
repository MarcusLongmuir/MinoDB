<p>
The <code>Save</code> function can be used to save both <a href="/docs/Folders">folders</a> and <a href="/docs/Items">items</a>.
</p>

<p>
The function takes a parameter named <code>Objects</code> which is an array of the <a href="/docs/Objects">objects</a> that you would like to save.
</p>

<p>
An optional parameter named <code>Allow Deprecated Fields</code> can be provided. This parameter specifies that values for <a href="/docs/Deprecated_Fields">deprecated fields</a> will be accepted as if the fields were not deprecated. This is set to <code>true</code> by default.
</p>

<div class="heading">Example Successful Request</div>
<pre>
"Objects" : [
    {
        "Name" : "Students",
        "Path" : "/ExampleUser/People/",
        "Folder" : true
    },
    {
        "ID" : 466,
        "Name" : "John Smith",
        "Path" : "/ExampleUser/People/",
        "Folder" : false,
        "ExampleUser.Person.1" : {
            "First Name" : "John",
            "Last Name" : "Smith",
            "Date of Birth" : "1983-04-28"
        }
    }
]
</pre>

<p>
If the <a href="/docs/Objects">objects</a> are saved successfully the function returns the following structure:
</p>

<pre>
"Objects" : [
    {
        "ID" : 1512,
        "Name" : "Students",
        "Full Path" : "/ExampleUser/People/Students/",
        "Created" : "2013-05-11 18:21:24"
    },
    {
        "ID" : 466,
        "Name" : "John Smith",
        "Path" : "/ExampleUser/People/",
        "Folder" : false,
        "ExampleUser.Person.1" : {
            "First Name" : "John",
            "Last Name" : "Smith",
            "Date of Birth" : "1983-04-28"
        }
    }
]
</pre>

<p>
This successful response structure allows you to add the original <a href="/docs/Objects">objects</a> to the fields to obtain the complete object.
</p>


<div class="heading">Erroneous Request</div>
<p>
The following request contains intentional errors.
</p>
<pre>
"Objects" : [
    {
        "ID" : -15,
        "Name" : {},
        "Folder" : true,
    },
    {
        "ID" : 466,
        "Item Name" : "Lorem Ipsum",//Key should be "Name"
        "Path" : "/Inaccessible/Folder/",
        "Folder" : false,
        "Inaccessible.Type.1" : {
            "A Field" : "Some value"
        }
    }
]
</pre>

<p>
If one or more of the <a href="/docs/Objects">objects</a> contain <a href="/docs/Errors">Errors</a> either with their structure or contents (missing keys or non-compliance with <a href="/docs/Types">type</a> parameters) then the erroneous objects are returned using the following structure:
</p>

<pre>
"Invalid" : {
    "Objects" : {
        "Invalid" : {
            "0" : {
                "Invalid" : {
                    "ID" : {
                        "Error" : "Invalid ID Number.",
                        "Error Number" : 38
                    },
                    "Name" : {
                        "Error" : "Incorrect field type. Expected __Expected__.",
                        "Expected" : "String",
                        "Error Number" : 2
                    }
                }
            },
            "1" : {
                "Invalid" : {
                    "Path" : {
                        "Error" : "Folder does not exist or you are not permitted to write to it.",
                        "Error Number" : 32
                    },
                    "Inaccessible.Type.1" : {
                        "Error" : "Type does not exist or you are not permitted to access it.",
                        "Error Number" : 15
                    }
                },
                "Unrecognized" : {
                    "Item Name" : {
                        "Error" : "Unrecognized field.",
                        "Error Number" : 4
                    }
                },
                "Missing" : {
                    "Name" : {
                        "Error" : "Field missing.",
                        "Error Number" : 1
                    }
                }
            }
        }
    }
}
</pre>

<p>
To learn about MinoCloud's <a href="/docs/Errors">error</a> structures, please read the <a href="/docs/Errors">errors</a> page.
</p>

<div class="heading">Path-based errors</div>
<p>
If all <a href="/docs/Objects">objects</a> being saved in a single request pass validation checks on their contents (all fields contain valid values) then the saving process begins.
</p>

<p>
Past this stage, each <a href="/docs/Objects">object</a> is saved separately and so if an <a href="/docs/Object">Object</a> cannot be saved due to it's <code>Full Path</code> already being allocated, other <a href="/docs/Objects">objects</a> in the request may save successfully. The erroneous <a href="/docs/Objects">objects</a> will be returned as errors in the response in the <code>Objects</code> key.
</p>

<div class="heading">Save Conditions</div>
<p>
When using the API, it is possible to enforce certain <a href="/docs/Save Conditions">Save Conditions</a> such as that the object does not move, does not get renamed and the previous version number. These conditions are useful for preventing the unintended moving of objects and ensuring unseen changes are not overwritten.
</p>